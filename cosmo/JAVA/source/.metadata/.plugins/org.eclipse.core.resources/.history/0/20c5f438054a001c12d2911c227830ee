package sec07.exam02_data_read_write;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;

public class SeverExample {
	public static void main(String[] args) {
		ServerSocket serverSocket = null;
		try {
			serverSocket = new ServerSocket();
			serverSocket.bind(new InetSocketAddress("localhost", 5001));
			
			while(true) {
				System.out.println("[연결 기다림]");
				Socket socket = serverSocket.accept();
				//서버 소켓을 열었으며 해당 소켓에 클라이언트가 접속하길 기다리는 중
				InetSocketAddress isa = (InetSocketAddress) socket.getRemoteSocketAddress();
				//server socket에 접속헌 client의 정보를  재공.
				//getRemoteScoketAddress는 InetSocketAddress 객체를 통해 리턴됨으로
				//해당 데이터를 얻고자 한다면 InetSocketAddress의 method를 통해 받도록 한다.
				//이 떄 socket.getRemoteSocketAddress() method를 통하여 리턴 받을 때 InetSocketAddress를 캐스팅 하여 받아준다.
				System.out.println("[연결 수락함]"+isa.getHostName());
				
				byte[] bytes = null;
				String message = null;
				
				InputStream is = socket.getInputStream();
				//socket을 통해  Output된 데이터를 받기 위해 InputStrean을 생성하였다.
				
				bytes = new byte[100];
				int readByteCount = is.read(bytes);
				//Cilent가 Output한 데이터를 수집. 해당 readByteCount를 통해 몇 byte에 해당하는 데이터가
				// 입력되었는지 확인한다.
				message = new String(bytes, 0, readByteCount, "UTF-8");
				//output받은 byte[]를 0번 배열서 붙어 byte의 끝까지 UTF-8 배열로 받도록 한다.
				
				System.out.println("[서버 클라이언트 데이타 받기 성공]: "+message);
				
				OutputStream os =socket.getOutputStream();
				//반대로 client서버에서 client 쪽으로 데이터를 전송하기 위해
				//outputStream 객체를 형성하여 socket을 통해 데이터를 전송 하고자 함
				message = "Hello client";
				bytes = message.getBytes("UTF-8");
				os.write(bytes);
				os.flush();
				System.out.println("[서버에서 데이터 보내기 성공]");
				
				is.close();
				os.close();
				socket.close();
			}
			
			
		} catch (IOException e) {}
		if(!serverSocket.isClosed()) {
			try {
				serverSocket.close();
			} catch(IOException e) {}
		}
	}
}